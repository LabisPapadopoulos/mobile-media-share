<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/applicationContext.properties</value>
				<value>classpath*:/mobileMediaShare.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- Etoima beans - koinoxrhsta (singleton) -->
	<!-- To bean dataSource metatrepetai apo to spring se java antikeimeno ston kwdika
	static final org.apache.commons.dbcp.BasicDataSource dataSource = new org.apache.commons.dbcp.BasicDataSource();
	//setters apo <property>
	dataSource.setDriverClassName(${jdbc.driver});
	dataSource.setUrl(${jdbc.url});
	...
	//close apo @destroy-method (tha klhthei otan to bean de xrhsimopoihtai pia)
	dataSource.close();
	-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" scope="singleton" destroy-method="close">
		<!-- value: den einai bean, einai aplo property -->
	    <property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
	</bean>

	<!-- static final java.lang.Integer bufferSize = new java.lang.Integer(${buffer.size}); -->
	<bean id="bufferSize" class="java.lang.Integer" scope="singleton">
		<constructor-arg value="${buffer.size}" />
	</bean>

	<!-- static final gr.uoa.di.std08169.mobile.media.share.server.jdbc.UserServiceImpl jdbcUserService = new 
										gr.uoa.di.std08169.mobile.media.share.server.jdbc.UserServiceImpl(dataSource); -->
	<bean id="jdbcUserService" class="gr.uoa.di.std08169.mobile.media.share.server.jdbc.UserServiceImpl" scope="singleton">
		<!-- San orisma tha parei bean me id to ref (etoimo dataSource) -->
		<constructor-arg ref="dataSource" /> <!-- deikths se object -->
		<constructor-arg value="${user.service.timeout}" />
	</bean>
	
	<!-- static final gr.uoa.di.std08169.mobile.media.share.server.gcd.UserServiceImpl gcdUserService = new 
	gr.uoa.di.std08169.mobile.media.share.server.gcd.UserServiceImpl(${google.cloud.dataset}, ${google.cloud.account}, ${google.cloud.key.file}); -->
	<bean id="gcdUserService" class="gr.uoa.di.std08169.mobile.media.share.server.gcd.UserServiceImpl" scope="singleton">
		<!-- Orismata gia ton constuctor tou bean, pou ta travaei apo to applicationContext.properties me ta ${...} -->
		<constructor-arg value="${google.cloud.dataset}" />
		<constructor-arg value="${google.cloud.account}" />
		<constructor-arg value="${google.cloud.key.file}" />
	</bean>
	
	<!-- static final gr.uoa.di.std08169.mobile.media.share.server.proxies.UserServiceProxy userService = new 
				gr.uoa.di.std08169.mobile.media.share.server.proxies.UserServiceProxy(${user.service}); -->
	<!-- Oloi zhtane ena userService -->
	<bean id="userService" class="gr.uoa.di.std08169.mobile.media.share.server.proxies.UserServiceProxy" scope="singleton">
	    <constructor-arg ref="${user.service}" /> <!-- diavazei apo property to user service -->
	</bean>
	
	<!-- static final gr.uoa.di.std08169.mobile.media.share.server.jdbc.MediaServiceImpl jdbcMediaService = new 
	gr.uoa.di.std08169.mobile.media.share.server.jdbc.MediaServiceImpl(dataSource, ${media.dir}, ${buffer.size}, userService); -->
	<bean id="jdbcMediaService" class="gr.uoa.di.std08169.mobile.media.share.server.jdbc.MediaServiceImpl" scope="singleton">
		<!-- San orisma tha parei bean me id to ref (etoimo dataSource) -->
		<constructor-arg ref="dataSource" />
		<!-- value giati einai timh kai oxi kapoio allo bean -->
		<constructor-arg value="${media.dir}" />
		<constructor-arg value="${buffer.size}" />
		<!-- To mediaService xrhsimopoiei to userService bean -->
		<constructor-arg ref="userService" />
	</bean>

	<bean id="gcdMediaService" class="gr.uoa.di.std08169.mobile.media.share.server.gcd.MediaServiceImpl" scope="singleton">
	    <constructor-arg value="${google.cloud.dataset}" />
		<constructor-arg value="${google.cloud.account}" />
		<constructor-arg value="${google.cloud.key.file}" />
		<constructor-arg ref="userService" />
	</bean>

	<!-- TODO -->	
	<!-- static final gr.uoa.di.std08169.mobile.media.share.server.proxies.MediaServiceProxy mediaService = new 
	gr.uoa.di.std08169.mobile.media.share.server.proxies.MediaServiceProxy(${media.service}); -->
	<!-- 
	<bean id="mediaService" class="gr.uoa.di.std08169.mobile.media.share.server.proxies.MediaServiceProxy" scope="singleton">
	    <constructor-arg ref="${media.service}" />
    </bean>
    -->
	<bean id="mediaService" class="gr.uoa.di.std08169.mobile.media.share.server.jdbc.MediaServiceImpl" scope="singleton">
		<!-- San orisma tha parei bean me id to ref (etoimo dataSource) -->
		<constructor-arg ref="dataSource" />
		<!-- value giati einai timh kai oxi kapoio allo bean -->
		<constructor-arg value="${media.dir}" />
		<constructor-arg value="${buffer.size}" />
		<!-- To mediaService xrhsimopoiei to userService bean -->
		<constructor-arg ref="userService" />
	</bean>
<!-- TODO -->	
	
	
	
    
	<!-- smtpHost: typou string kai singleton gia xrhsh panta tou idiou -->
	<bean id="smtpHost" class="java.lang.String" scope="singleton">
	    <constructor-arg value="${smtp.host}" />
	</bean>
	
	<bean id="smtpPort" class="java.lang.Integer" scope="singleton">
	    <constructor-arg value="${smtp.port}" />
	</bean>
	
	<bean id="smtpAuth" class="java.lang.Boolean" scope="singleton">
	    <constructor-arg value="${smtp.auth}" />
	</bean>
	
	<bean id="smtpSSL" class="java.lang.Boolean" scope="singleton">
	    <constructor-arg value="${smtp.ssl}" />
	</bean>
	
	<bean id="smtpUser" class="java.lang.String" scope="singleton">
	    <constructor-arg value="${smtp.user}" />
	</bean>
	
	<bean id="smtpPassword" class="java.lang.String" scope="singleton">
	    <constructor-arg value="${smtp.password}" />
	</bean>
	
	<bean id="smtpFrom" class="java.lang.String" scope="singleton">
	    <constructor-arg value="${smtp.from}" />
	</bean>
	
	<bean id="smtpReplyTo" class="java.lang.String" scope="singleton">
	    <constructor-arg value="${smtp.reply.to}" />
	</bean>
	
	<bean id="smtpResourceBundle" class="java.lang.String" scope="singleton">
	    <constructor-arg value="${smtp.resource.bundle}" />
	</bean>
</beans>
